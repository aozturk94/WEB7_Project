// <auto-generated />
using System;
using Bus_Ticket_Booking.Data.Concrete.EfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bus_Ticket_Booking.Data.Migrations
{
    [DbContext(typeof(Bus_Ticket_BookingContext))]
    [Migration("20220513134228_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.16");

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Bus", b =>
                {
                    b.Property<int>("BusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusSeatCapacity")
                        .HasColumnType("INTEGER");

                    b.HasKey("BusId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CityName")
                        .HasColumnType("TEXT");

                    b.HasKey("CityId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Route", b =>
                {
                    b.Property<int>("RouteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CityId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EndLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstRoute")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SecondRoute")
                        .HasColumnType("TEXT");

                    b.Property<string>("StartLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("ThirdRoute")
                        .HasColumnType("TEXT");

                    b.Property<string>("Time")
                        .HasColumnType("TEXT");

                    b.HasKey("RouteId");

                    b.HasIndex("CityId");

                    b.ToTable("Routes");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Ticket", b =>
                {
                    b.Property<int>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BusSeat")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerFirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerLastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("PassengerMail")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("RouteId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TicketPrice")
                        .HasColumnType("REAL");

                    b.Property<string>("TravelFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("TravelTo")
                        .HasColumnType("TEXT");

                    b.HasKey("TicketId");

                    b.HasIndex("BusId");

                    b.HasIndex("RouteId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Route", b =>
                {
                    b.HasOne("Bus_Ticket_Booking.Entity.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Ticket", b =>
                {
                    b.HasOne("Bus_Ticket_Booking.Entity.Bus", "Bus")
                        .WithMany()
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bus_Ticket_Booking.Entity.Route", "Route")
                        .WithMany("Tickets")
                        .HasForeignKey("RouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Route");
                });

            modelBuilder.Entity("Bus_Ticket_Booking.Entity.Route", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
